#+TITLE: Design Doc
* Parser
  '.' and '[]' are left to right.
  Better Error messages?
  Is it an error for extra semicolon at the end?
* Semantics
** Types
   
#+BEGIN_SRC haskell -n
data Type = TInt
          | TString
          | TRecord [(AST.Id, Type)]
          | TArray [Type]
          | TNil
          | TUnit
          | TName [(AST.Id, Type)]
#+END_SRC
*** Recursive Types
Example: type intlist = { data : int, rest : intlist }
TName "intlist" TRecord [("data", TInt), ("rest", TName "intlist" Nothing)]

** Symbol Tables
*** Symbol
    newtype Symbol = Symbol String
*** Variable/Function Environment
Map: Symbol -> Type
*** Type Environment
Map: Symbol -> Type
** Testcases
   - [ ] test5: Valid recursive record
   - [ ] test16: mutually recursive types that do not pass through record
   - [X] test23: hmmm...
     lValue parser should not parse assign
   - [X] test24: hmmm...
   - [X] test25: hmmm...
   - [X] test31: type constaint and init value defer
   - [X] test32: type constaint and array init expr defer
   - [ ] test32: Error not being evaluated. Therefore error not thrown.
   - [X] test33: unknown rec type
   - [ ] test33: Error not being evaluated. Therefore error not thrown.
   - [X] test37: redeclaration
   - [X] test38: redeclaring types are illegal
   - [X] test39: redeclaring functions are illegal
     Also sym tables from arg list missing in function body
   - [X] test42: Type equality
   - [X] test44: Nil and record compatibility
   - [X] test45: Nil and record compatibility
   - [X] test46: Nil and record compatibility
     Record equality
   - [ ] test47: Mutual recursion
   - [ ] test48: Mutual recursion
   - [ ] queen: Type equality
   - [ ] merge: Type equality
     Recursive functions, Recursive types
     
** Error Messages
   Needs work.
   Possible Idea:
   typeCheck :: * -> Either ErrorBuffer Type 
   Every call to typeCheck has to check if it encountered ErrorBuffer.
   Whenever types are invalid, build up buffer.
